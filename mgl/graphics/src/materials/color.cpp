#include "mgl_graphics/materials/color.hpp"
#include "mgl_core/debug.hpp"
#include "mgl_window/window.hpp"

// Include generated shader source, this files are generated by the build system
// from the files in shaders/vertex and shaders/fragment
#include "shaders/fragment/color.h"
#include "shaders/vertex/simple.h"
namespace mgl::graphics
{
  static mgl::window::program_ref s_program;
  static mgl::window::uniform_ref s_color;

  color_material::color_material(const glm::vec4& color)
      : material()
      , m_color(color)
  {
    auto ctx = mgl::window::current_context();
    MGL_CORE_ASSERT(ctx, "No context!");

    if(!s_program)
    {
      // Load vertex and fragment shaders from generated source
      mgl::opengl::shaders glsl = { reinterpret_cast<const char*>(vertex_shader_source),
                                    reinterpret_cast<const char*>(fragment_shader_source) };

      s_program = ctx->program(glsl);
      s_color = s_program->uniform("color");
    }
  }

  void color_material::prepare()
  {
    s_color->set_value(m_color);
  }

  const mgl::window::program_ref& color_material::program()
  {
    return s_program;
  }

} // namespace mgl::graphics